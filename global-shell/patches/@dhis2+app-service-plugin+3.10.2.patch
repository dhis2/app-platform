diff --git a/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js b/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
index ec9ac08..48f6c78 100644
--- a/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
+++ b/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
@@ -46,6 +46,7 @@ const Plugin = (_ref3) => {
   let {
     pluginSource,
     pluginShortName,
+    onLoad,
     ...propsToPassNonMemoized
   } = _ref3;
   const iframeRef = (0, _react.useRef)(null); // we do not know what is being sent in passed props, so for stable reference, memoize using JSON representation
@@ -68,11 +69,9 @@ const Plugin = (_ref3) => {
     apps: (data === null || data === void 0 ? void 0 : data.apps) || [],
     appShortName: pluginShortName
   });
-  const [communicationReceived, setCommunicationReceived] = (0, _react.useState)(false);
-  const [prevCommunicationReceived, setPrevCommunicationReceived] = (0, _react.useState)(false);
   const [inErrorState, setInErrorState] = (0, _react.useState)(false);
-  const [pluginHeight, setPluginHeight] = (0, _react.useState)(150);
-  const [pluginWidth, setPluginWidth] = (0, _react.useState)(500);
+  const [pluginHeight, setPluginHeight] = (0, _react.useState)('150px');
+  const [pluginWidth, setPluginWidth] = (0, _react.useState)('500px');
   (0, _react.useEffect)(() => {
     if (height) {
       setPluginHeight(height);
@@ -88,50 +87,73 @@ const Plugin = (_ref3) => {
   [...Object.keys(propsToPass).sort().map(k => propsToPass[k])]
   /* eslint-enable react-hooks/exhaustive-deps */
   );
-  (0, _react.useEffect)(() => {
-    setCommunicationReceived(false);
-  }, [pluginEntryPoint]);
-  (0, _react.useEffect)(() => {
-    // if communicationReceived switches from false to true, the props have been sent
-    const prevCommunication = prevCommunicationReceived;
-    setPrevCommunicationReceived(communicationReceived);
-
-    if (prevCommunication === false && communicationReceived === true) {
+  const propsFromParentListenerRef = (0, _react.useRef)();
+  const communicationReceivedRef = (0, _react.useRef)(false);
+  const setUpCommunication = (0, _react.useCallback)(() => {
+    if (!iframeRef.current) {
       return;
     }
 
-    if (iframeRef !== null && iframeRef !== void 0 && iframeRef.current) {
-      const iframeProps = { ...memoizedPropsToPass,
-        alertsAdd,
-        setPluginHeight,
-        setPluginWidth,
-        setInErrorState,
-        setCommunicationReceived
-      }; // if iframe has not sent initial request, set up a listener
-
-      if (!communicationReceived && !inErrorState) {
-        const listener = _postRobot.default.on('getPropsFromParent', // listen for messages coming only from the iframe rendered by this component
+    const iframeProps = { ...memoizedPropsToPass,
+      alertsAdd,
+      setPluginHeight,
+      setPluginWidth,
+      setInErrorState // todo: what does this do? resets state from error component
+      // seems to work without...
+      // setCommunicationReceived,
+
+    }; // if iframe has not sent initial request, set up a listener
+
+    if (!communicationReceivedRef.current && !inErrorState) {
+      // avoid setting up twice
+      if (!propsFromParentListenerRef.current) {
+        propsFromParentListenerRef.current = _postRobot.default.on('getPropsFromParent', // listen for messages coming only from the iframe rendered by this component
         {
           window: iframeRef.current.contentWindow
         }, () => {
-          setCommunicationReceived(true);
+          communicationReceivedRef.current = true;
           return iframeProps;
         });
+      } // return clean-up function
 
-        return () => listener.cancel();
-      } // if iframe has sent initial request, send new props
 
+      return () => {
+        propsFromParentListenerRef.current.cancel();
+        propsFromParentListenerRef.current = null;
+      };
+    } // if iframe has sent initial request, send new props
+    // (don't do before to avoid sending messages before listeners
+    // are ready)
 
-      if (communicationReceived && iframeRef.current.contentWindow && !inErrorState) {
-        _postRobot.default.send(iframeRef.current.contentWindow, 'updated', iframeProps).catch(err => {
-          // log postRobot errors, but do not bubble them up
-          console.error(err);
-        });
-      }
-    } // prevCommunicationReceived update should not retrigger this hook
-    // eslint-disable-next-line react-hooks/exhaustive-deps
 
-  }, [memoizedPropsToPass, communicationReceived, inErrorState, alertsAdd]);
+    if (iframeRef.current.contentWindow && !inErrorState) {
+      _postRobot.default.send(iframeRef.current.contentWindow, 'updated', iframeProps).catch(err => {
+        // log postRobot errors, but do not bubble them up
+        console.error(err);
+      });
+    }
+  }, [memoizedPropsToPass, inErrorState, alertsAdd]);
+  (0, _react.useEffect)(() => {
+    // return the clean-up function
+    return setUpCommunication();
+  }, [setUpCommunication]);
+  const handleLoad = (0, _react.useCallback)(event => {
+    // reset communication received
+    communicationReceivedRef.current = false;
+
+    if (propsFromParentListenerRef.current) {
+      propsFromParentListenerRef.current.cancel();
+      propsFromParentListenerRef.current = null;
+    } // Need to set this up again whenever the iframe contentWindow
+    // changes (e.g. navigations or reloads)
+
+
+    setUpCommunication();
+
+    if (onLoad) {
+      onLoad(event);
+    }
+  }, [onLoad, setUpCommunication]);
 
   if (data && !pluginEntryPoint) {
     return /*#__PURE__*/_react.default.createElement(_PluginError.default, {
@@ -143,8 +165,8 @@ const Plugin = (_ref3) => {
   if (pluginEntryPoint) {
     return /*#__PURE__*/_react.default.createElement("div", {
       style: {
-        height: `${pluginHeight}px`,
-        width: `${pluginWidth}px`
+        height: `${pluginHeight}`,
+        width: `${pluginWidth}`
       }
     }, /*#__PURE__*/_react.default.createElement("iframe", {
       ref: iframeRef,
@@ -153,7 +175,8 @@ const Plugin = (_ref3) => {
         width: '100%',
         height: '100%',
         border: 'none'
-      }
+      },
+      onLoad: handleLoad
     }));
   }
 
diff --git a/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js b/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
index eb805b0..716c7e3 100644
--- a/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
+++ b/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
@@ -1,7 +1,7 @@
 import { AlertsManagerContext } from '@dhis2/app-service-alerts';
 import { useDataQuery } from '@dhis2/app-service-data';
 import postRobot from 'post-robot';
-import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';
+import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
 import PluginError from './PluginError';
 const appsInfoQuery = {
   apps: {
@@ -28,6 +28,7 @@ export const Plugin = (_ref3) => {
   let {
     pluginSource,
     pluginShortName,
+    onLoad,
     ...propsToPassNonMemoized
   } = _ref3;
   const iframeRef = useRef(null); // we do not know what is being sent in passed props, so for stable reference, memoize using JSON representation
@@ -50,11 +51,9 @@ export const Plugin = (_ref3) => {
     apps: (data === null || data === void 0 ? void 0 : data.apps) || [],
     appShortName: pluginShortName
   });
-  const [communicationReceived, setCommunicationReceived] = useState(false);
-  const [prevCommunicationReceived, setPrevCommunicationReceived] = useState(false);
   const [inErrorState, setInErrorState] = useState(false);
-  const [pluginHeight, setPluginHeight] = useState(150);
-  const [pluginWidth, setPluginWidth] = useState(500);
+  const [pluginHeight, setPluginHeight] = useState('150px');
+  const [pluginWidth, setPluginWidth] = useState('500px');
   useEffect(() => {
     if (height) {
       setPluginHeight(height);
@@ -70,49 +69,73 @@ export const Plugin = (_ref3) => {
   [...Object.keys(propsToPass).sort().map(k => propsToPass[k])]
   /* eslint-enable react-hooks/exhaustive-deps */
   );
-  useEffect(() => {
-    setCommunicationReceived(false);
-  }, [pluginEntryPoint]);
-  useEffect(() => {
-    // if communicationReceived switches from false to true, the props have been sent
-    const prevCommunication = prevCommunicationReceived;
-    setPrevCommunicationReceived(communicationReceived);
-
-    if (prevCommunication === false && communicationReceived === true) {
+  const propsFromParentListenerRef = useRef();
+  const communicationReceivedRef = useRef(false);
+  const setUpCommunication = useCallback(() => {
+    if (!iframeRef.current) {
       return;
     }
 
-    if (iframeRef !== null && iframeRef !== void 0 && iframeRef.current) {
-      const iframeProps = { ...memoizedPropsToPass,
-        alertsAdd,
-        setPluginHeight,
-        setPluginWidth,
-        setInErrorState,
-        setCommunicationReceived
-      }; // if iframe has not sent initial request, set up a listener
-
-      if (!communicationReceived && !inErrorState) {
-        const listener = postRobot.on('getPropsFromParent', // listen for messages coming only from the iframe rendered by this component
+    const iframeProps = { ...memoizedPropsToPass,
+      alertsAdd,
+      setPluginHeight,
+      setPluginWidth,
+      setInErrorState // todo: what does this do? resets state from error component
+      // seems to work without...
+      // setCommunicationReceived,
+
+    }; // if iframe has not sent initial request, set up a listener
+
+    if (!communicationReceivedRef.current && !inErrorState) {
+      // avoid setting up twice
+      if (!propsFromParentListenerRef.current) {
+        propsFromParentListenerRef.current = postRobot.on('getPropsFromParent', // listen for messages coming only from the iframe rendered by this component
         {
           window: iframeRef.current.contentWindow
         }, () => {
-          setCommunicationReceived(true);
+          communicationReceivedRef.current = true;
           return iframeProps;
         });
-        return () => listener.cancel();
-      } // if iframe has sent initial request, send new props
+      } // return clean-up function
 
 
-      if (communicationReceived && iframeRef.current.contentWindow && !inErrorState) {
-        postRobot.send(iframeRef.current.contentWindow, 'updated', iframeProps).catch(err => {
-          // log postRobot errors, but do not bubble them up
-          console.error(err);
-        });
-      }
-    } // prevCommunicationReceived update should not retrigger this hook
-    // eslint-disable-next-line react-hooks/exhaustive-deps
+      return () => {
+        propsFromParentListenerRef.current.cancel();
+        propsFromParentListenerRef.current = null;
+      };
+    } // if iframe has sent initial request, send new props
+    // (don't do before to avoid sending messages before listeners
+    // are ready)
+
+
+    if (iframeRef.current.contentWindow && !inErrorState) {
+      postRobot.send(iframeRef.current.contentWindow, 'updated', iframeProps).catch(err => {
+        // log postRobot errors, but do not bubble them up
+        console.error(err);
+      });
+    }
+  }, [memoizedPropsToPass, inErrorState, alertsAdd]);
+  useEffect(() => {
+    // return the clean-up function
+    return setUpCommunication();
+  }, [setUpCommunication]);
+  const handleLoad = useCallback(event => {
+    // reset communication received
+    communicationReceivedRef.current = false;
+
+    if (propsFromParentListenerRef.current) {
+      propsFromParentListenerRef.current.cancel();
+      propsFromParentListenerRef.current = null;
+    } // Need to set this up again whenever the iframe contentWindow
+    // changes (e.g. navigations or reloads)
 
-  }, [memoizedPropsToPass, communicationReceived, inErrorState, alertsAdd]);
+
+    setUpCommunication();
+
+    if (onLoad) {
+      onLoad(event);
+    }
+  }, [onLoad, setUpCommunication]);
 
   if (data && !pluginEntryPoint) {
     return /*#__PURE__*/React.createElement(PluginError, {
@@ -124,8 +147,8 @@ export const Plugin = (_ref3) => {
   if (pluginEntryPoint) {
     return /*#__PURE__*/React.createElement("div", {
       style: {
-        height: `${pluginHeight}px`,
-        width: `${pluginWidth}px`
+        height: `${pluginHeight}`,
+        width: `${pluginWidth}`
       }
     }, /*#__PURE__*/React.createElement("iframe", {
       ref: iframeRef,
@@ -134,7 +157,8 @@ export const Plugin = (_ref3) => {
         width: '100%',
         height: '100%',
         border: 'none'
-      }
+      },
+      onLoad: handleLoad
     }));
   }
 
diff --git a/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts b/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts
deleted file mode 100644
index 8dba594..0000000
--- a/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-/// <reference types="react" />
-export declare const Plugin: ({ pluginSource, pluginShortName, ...propsToPassNonMemoized }: {
-    pluginSource?: string | undefined;
-    pluginShortName?: string | undefined;
-    propsToPass: any;
-}) => JSX.Element;
diff --git a/node_modules/@dhis2/app-service-plugin/build/types/PluginError.d.ts b/node_modules/@dhis2/app-service-plugin/build/types/PluginError.d.ts
deleted file mode 100644
index dc87dc6..0000000
--- a/node_modules/@dhis2/app-service-plugin/build/types/PluginError.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-/// <reference types="react" />
-declare const PluginError: ({ missingEntryPoint, appShortName, }: {
-    missingEntryPoint: boolean;
-    appShortName?: string | undefined;
-}) => JSX.Element;
-export default PluginError;
diff --git a/node_modules/@dhis2/app-service-plugin/build/types/index.d.ts b/node_modules/@dhis2/app-service-plugin/build/types/index.d.ts
deleted file mode 100644
index 48bf19d..0000000
--- a/node_modules/@dhis2/app-service-plugin/build/types/index.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { Plugin } from './Plugin';
diff --git a/node_modules/@dhis2/app-service-plugin/build/types/types.d.ts b/node_modules/@dhis2/app-service-plugin/build/types/types.d.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/node_modules/@dhis2/app-service-plugin/build/types/types.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
