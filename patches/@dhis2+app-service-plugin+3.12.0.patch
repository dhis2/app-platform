diff --git a/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js b/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
index ffd1cf0..637cf1f 100644
--- a/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
+++ b/node_modules/@dhis2/app-service-plugin/build/cjs/Plugin.js
@@ -38,6 +38,8 @@ const Plugin = _ref3 => {
     pluginShortName,
     height,
     width,
+    className,
+    clientWidth,
     ...propsToPassNonMemoized
   } = _ref3;
   const iframeRef = (0, _react.useRef)(null);
@@ -79,7 +81,8 @@ const Plugin = _ref3 => {
         setPluginHeight: !height ? setPluginHeight : null,
         setPluginWidth: !width ? setPluginWidth : null,
         setInErrorState,
-        setCommunicationReceived
+        setCommunicationReceived,
+        clientWidth
       };
 
       // if iframe has not sent initial request, set up a listener
@@ -112,17 +115,34 @@ const Plugin = _ref3 => {
       appShortName: pluginShortName
     });
   }
-  if (pluginEntryPoint) {
+  if (!pluginEntryPoint) {
+    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
+  }
+  if (clientWidth || width) {
     return /*#__PURE__*/_react.default.createElement("iframe", {
       ref: iframeRef,
       src: pluginSource,
-      width: width !== null && width !== void 0 ? width : resizedWidth + 'px',
+      className: className,
+      width: clientWidth ? resizedWidth : width,
       height: height !== null && height !== void 0 ? height : resizedHeight + 'px',
       style: {
         border: 'none'
       }
     });
   }
-  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
+  // if not using `clientWidth` or a set width, then wrap in a regular div
+  // to get 'width: auto' behavior that is a div's default behavior
+  return /*#__PURE__*/_react.default.createElement("div", {
+    className: className
+  }, /*#__PURE__*/_react.default.createElement("iframe", {
+    ref: iframeRef,
+    src: pluginSource,
+    width: "100%" // have iframe match div width
+    ,
+    height: height !== null && height !== void 0 ? height : resizedHeight + 'px',
+    style: {
+      border: 'none'
+    }
+  }));
 };
 exports.Plugin = Plugin;
\ No newline at end of file
diff --git a/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js b/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
index f3d29cd..12a7dee 100644
--- a/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
+++ b/node_modules/@dhis2/app-service-plugin/build/es/Plugin.js
@@ -29,6 +29,8 @@ export const Plugin = _ref3 => {
     pluginShortName,
     height,
     width,
+    className,
+    clientWidth,
     ...propsToPassNonMemoized
   } = _ref3;
   const iframeRef = useRef(null);
@@ -70,7 +72,8 @@ export const Plugin = _ref3 => {
         setPluginHeight: !height ? setPluginHeight : null,
         setPluginWidth: !width ? setPluginWidth : null,
         setInErrorState,
-        setCommunicationReceived
+        setCommunicationReceived,
+        clientWidth
       };
 
       // if iframe has not sent initial request, set up a listener
@@ -103,16 +106,33 @@ export const Plugin = _ref3 => {
       appShortName: pluginShortName
     });
   }
-  if (pluginEntryPoint) {
+  if (!pluginEntryPoint) {
+    return /*#__PURE__*/React.createElement(React.Fragment, null);
+  }
+  if (clientWidth || width) {
     return /*#__PURE__*/React.createElement("iframe", {
       ref: iframeRef,
       src: pluginSource,
-      width: width !== null && width !== void 0 ? width : resizedWidth + 'px',
+      className: className,
+      width: clientWidth ? resizedWidth : width,
       height: height !== null && height !== void 0 ? height : resizedHeight + 'px',
       style: {
         border: 'none'
       }
     });
   }
-  return /*#__PURE__*/React.createElement(React.Fragment, null);
+  // if not using `clientWidth` or a set width, then wrap in a regular div
+  // to get 'width: auto' behavior that is a div's default behavior
+  return /*#__PURE__*/React.createElement("div", {
+    className: className
+  }, /*#__PURE__*/React.createElement("iframe", {
+    ref: iframeRef,
+    src: pluginSource,
+    width: "100%" // have iframe match div width
+    ,
+    height: height !== null && height !== void 0 ? height : resizedHeight + 'px',
+    style: {
+      border: 'none'
+    }
+  }));
 };
\ No newline at end of file
diff --git a/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts b/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts
index f216e23..2321e66 100644
--- a/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts
+++ b/node_modules/@dhis2/app-service-plugin/build/types/Plugin.d.ts
@@ -1,8 +1,10 @@
 /// <reference types="react" />
-export declare const Plugin: ({ pluginSource, pluginShortName, height, width, ...propsToPassNonMemoized }: {
+export declare const Plugin: ({ pluginSource, pluginShortName, height, width, className, clientWidth, ...propsToPassNonMemoized }: {
     pluginSource?: string | undefined;
     pluginShortName?: string | undefined;
     height?: string | number | undefined;
     width?: string | number | undefined;
+    className?: string | undefined;
+    clientWidth?: string | number | undefined;
     propsToPass: any;
 }) => JSX.Element;
